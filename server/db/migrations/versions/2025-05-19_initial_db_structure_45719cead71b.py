"""Initial DB Structure

Revision ID: 45719cead71b
Revises: 
Create Date: 2025-05-19 00:27:19.542036

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC, StoredObject, PasswordHash
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = '45719cead71b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('professors',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('surname', sa.String(length=128), nullable=False),
    sa.Column('role', sa.Enum('ORDINARY', 'ASSOCIATE', 'RESEARCHER', 'UNSPECIFIED', name='universityrole'), server_default='UNSPECIFIED', nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_professors'))
    )
    with op.batch_alter_table('professors', schema=None) as batch_op:
        batch_op.create_index('idx_professors_name_surname_unique', ['name', 'surname'], unique=True)

    op.create_table('sessions',
    sa.Column('title', sa.String(length=256), nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sessions'))
    )
    op.create_table('students',
    sa.Column('matriculation_number', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('surname', sa.String(length=128), nullable=False),
    sa.Column('phone_number', sa.String(length=128), nullable=False),
    sa.Column('personal_email', sa.String(length=128), nullable=False),
    sa.Column('university_email', sa.String(length=128), nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_students'))
    )
    op.create_table('professor_availabilities',
    sa.Column('professor_id', sa.BigInteger(), nullable=False),
    sa.Column('session_id', sa.BigInteger(), nullable=False),
    sa.Column('availability', sa.Enum('MORNING', 'AFTERNOON', 'ALWAYS', 'SPLIT', name='timeavailability'), nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['professor_id'], ['professors.id'], name=op.f('fk_professor_availabilities_professor_id_professors')),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_professor_availabilities_session_id_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_professor_availabilities'))
    )
    op.create_table('session_entries',
    sa.Column('session_id', sa.BigInteger(), nullable=False),
    sa.Column('candidate_id', sa.BigInteger(), nullable=False),
    sa.Column('degree_level', sa.Enum('BACHELORS', 'MASTERS', name='degree'), nullable=False),
    sa.Column('supervisor_id', sa.BigInteger(), nullable=False),
    sa.Column('supervisor2_id', sa.BigInteger(), nullable=True),
    sa.Column('supervisor_assistant_id', sa.BigInteger(), nullable=True),
    sa.Column('counter_supervisor_id', sa.BigInteger(), nullable=True),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['candidate_id'], ['students.id'], name=op.f('fk_session_entries_candidate_id_students')),
    sa.ForeignKeyConstraint(['counter_supervisor_id'], ['professors.id'], name=op.f('fk_session_entries_counter_supervisor_id_professors')),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('fk_session_entries_session_id_sessions')),
    sa.ForeignKeyConstraint(['supervisor2_id'], ['professors.id'], name=op.f('fk_session_entries_supervisor2_id_professors')),
    sa.ForeignKeyConstraint(['supervisor_assistant_id'], ['professors.id'], name=op.f('fk_session_entries_supervisor_assistant_id_professors')),
    sa.ForeignKeyConstraint(['supervisor_id'], ['professors.id'], name=op.f('fk_session_entries_supervisor_id_professors')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_session_entries'))
    )
    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('session_entries')
    op.drop_table('professor_availabilities')
    op.drop_table('students')
    op.drop_table('sessions')
    with op.batch_alter_table('professors', schema=None) as batch_op:
        batch_op.drop_index('idx_professors_name_surname_unique')

    op.drop_table('professors')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
